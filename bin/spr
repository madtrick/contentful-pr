#!/usr/bin/env node

'use strict';

var yargs                  = require('yargs');
var fs                     = require('fs');
var homedir                = require('home-dir');
var plugins                = require('../lib/plugins');
var configurationValidator = require('../lib/configuration-validator');

var cliOptionsReader = yargs
  .demand(['base'])
  .alias('a', 'assignee')
  .describe('a', 'Github name of the pull request assignee')
  .alias('b', 'base')
  .describe('b', 'Specify the base branch to merge the pull request into')
  .alias('h', 'help')
  .describe('h', 'This help')
  .alias('t', 'template')
  .alias('v', 'verbose')
  .describe('v', 'Be verbose')
  .describe('t', 'Path to template to be used in pull request message')
  ;

var CONFIG_FILE_PATH = '.spr';

fs.readFile(homedir(CONFIG_FILE_PATH), function (err, data) {
  // TODO check if the argv can reevaluated after addingthe extra
  // options comming from the plugins

  var logger = require('../lib/logging').logger({verbose: true});
  var options;
  var argv;
  var config;

  if (!data) {
    logger.error('Missing config file');
    return;
  }

  config = JSON.parse(data);

  if (!configurationValidator(config)) {
    logger.error('Some of the configuration parameters are invalid');
    return;
  }

  plugins.init(config.plugins);
  cliOptionsReader = extendCliOptions(cliOptionsReader, plugins.cliOptions());

  argv = cliOptionsReader.argv;

  options = {
    base     : argv.base,
    template : argv.template,
    assignee : argv.assignee
  };

  require('..')(config, options);
});

function extendCliOptions (optionsReader, extensionOptions) {
  return extensionOptions.reduce( function (optionsReader, option) {
    return optionsReader.option(
      option.short,
      {
        alias: option.long,
        demand: option.required,
        describe: option.description
      }
    );
  }, optionsReader);
}
